# GitHub Actions workflow for creating a new FoundryVTT module release.
#
# Useful References:
#   - https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions
#   - https://docs.github.com/en/actions/learn-github-actions/contexts
#   - https://docs.github.com/en/actions/learn-github-actions/environment-variables
#
# Troubleshooting Checklist:
#   - Is the module's manifest file valid JSON?
#     You can test your manifest file using https://jsonlint.com/.
#
#   - Does the module's manifest have all the required keys?
#     See https://foundryvtt.com/article/module-development/#manifest for more
#     information.
#
#   - Are all the proper files and directories being included in the release's
#     module archive ("module.zip")?
#     Check that the correct files are being passed to the `zip` command run
#     in the "Create Module Archive" step below.
#
#   - Is the release tag the proper format?
#     See the comments for the "Extract Version From Tag" step below.
#
#   - Is a GitHub release being published?
#     This workflow will only run when a release is published, not when a
#     release is updated. Furthermore, note that while a GitHub release will
#     (by default) create a repository tag, a repository tag will not create
#     or publish a GitHub release.
#
#   - Has the module's entry on FoundryVTT's module administration site
#     (https://foundryvtt.com/admin) been updated?
#
name: Auto Release on Main/Master

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get Latest Release Tag
        id: get_latest_tag
        run: |
          latest_tag=$(git tag --sort=-v:refname | grep -E '^v?[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1)
          if [ -z "$latest_tag" ]; then
            echo "No release found, starting at v1.0.0"
            echo "tag=v1.0.0" >> $GITHUB_OUTPUT
          else
            echo "Latest tag: $latest_tag"
            version=${latest_tag#v}
            IFS='.' read -r major minor patch <<< "$version"
            patch=$((patch + 1))
            new_tag="v$major.$minor.$patch"
            echo "tag=$new_tag" >> $GITHUB_OUTPUT
          fi

      - name: Set Version
        id: set_version
        run: |
          version=${{ steps.get_latest_tag.outputs.tag }}
          version=${version#v}
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Modify Module Manifest With Release-Specific Values
        id: sub_manifest_link_version
        uses: cschleiden/replace-tokens@v1
        with:
          files: 'module.json'
        env:
          VERSION: ${{ steps.set_version.outputs.version }}
          URL: ${{ github.server_url }}/${{ github.repository }}
          MANIFEST: ${{ github.server_url }}/${{ github.repository }}/releases/latest/download/module.json
          DOWNLOAD: ${{ github.server_url }}/${{ github.repository }}/releases/download/${{ steps.get_latest_tag.outputs.tag }}/module.zip

      - name: Prepare Module Directory
        run: |
          mkdir -p ./simple-requests
          cp module.json ./simple-requests/
          [ -f README.md ] && cp README.md ./simple-requests/
          [ -f LICENSE ] && cp LICENSE ./simple-requests/
          [ -d templates ] && cp -r templates ./simple-requests/
          [ -d scripts ] && cp -r scripts ./simple-requests/
          [ -d styles ] && cp -r styles ./simple-requests/
          [ -d packs ] && cp -r packs ./simple-requests/
          [ -d language ] && cp -r language ./simple-requests/
          [ -d assets ] && cp -r assets ./simple-requests/

      - name: Create Module Archive
        run: |
          cd ./simple-requests
          zip --recurse-paths ../module.zip ./*
          cd ..

      - name: Create or Update Release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          name: ${{ steps.get_latest_tag.outputs.tag }}
          tag: ${{ steps.get_latest_tag.outputs.tag }}
          artifacts: './module.json, ./module.zip'
          token: ${{ secrets.GITHUB_TOKEN }}
